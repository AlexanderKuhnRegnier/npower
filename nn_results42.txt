MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(858, 858), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(858, 858) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.998406940746 |0.797152441787
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(156,), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 10, 18, 40, 60, 90] |(156,) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.977850724766 |0.779511286068
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(415, 415), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 2, 6, 8, 20, 40, 60] |(415, 415) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.995608823998 |0.750818818185
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(173, 173), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 2, 6, 8, 20, 40, 60] |(173, 173) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.990536596167 |0.773287339984
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(778, 778), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 2, 6, 8, 20, 40, 60] |(778, 778) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.996192173964 |0.773381484687
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(931, 931, 931), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 10, 18, 40, 60, 90] |(931, 931, 931) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |8.75099434068e-05 |-1.01634583995
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(399, 399, 399), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 2, 6, 8, 20, 40, 60] |(399, 399, 399) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.976309391008 |0.822637199123
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(431, 431), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 10, 18, 40, 60, 90] |(431, 431) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.995063367777 |0.816587062508
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(615, 615, 615), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 10, 18, 40, 60, 90] |(615, 615, 615) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.993649446873 |0.803652575051
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(397, 397), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(397, 397) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.994359956261 |0.810708769956
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(809, 809, 809), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 10, 18, 40, 60, 90] |(809, 809, 809) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.993609079079 |0.824215995978
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(218, 218), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 2, 6, 8, 20, 40, 60] |(218, 218) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.990367649869 |0.759013846858
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(81, 81, 81), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(81, 81, 81) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.965536127996 |0.82525007496
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(715,), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(715,) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.995912942366 |0.734104701207
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(861, 861), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 10, 18, 40, 60, 90] |(861, 861) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.997347845393 |0.814875081163
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(646, 646), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(646, 646) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.996431872844 |0.820196517185
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(288, 288, 288), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(288, 288, 288) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.987424241641 |0.84530537563
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(326, 326, 326), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 10, 18, 40, 60, 90] |(326, 326, 326) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.993664570762 |0.814133682676
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(597, 597), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(597, 597) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.995969426022 |0.845169467815
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(254, 254), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(254, 254) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.995091063855 |0.794823968094
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(583, 583), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(583, 583) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.997311874407 |0.778237111369
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(995, 995), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(995, 995) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.997412576058 |0.821205035241
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(339, 339), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 10, 18, 40, 60, 90] |(339, 339) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.995028491844 |0.761753883466
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(976,), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(976,) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.998204607455 |0.738425440802
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(788, 788), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 10, 18, 40, 60, 90] |(788, 788) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.996715938539 |0.778529208111
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(608, 608, 608), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 2, 6, 8, 20, 40, 60] |(608, 608, 608) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.99301101484 |0.792707985664
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(116,), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 10, 18, 40, 60, 90] |(116,) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.97066267228 |0.779687983403
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(444,), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 10, 18, 40, 60, 90] |(444,) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.993167862211 |0.754157197397
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(499,), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 2, 6, 8, 20, 40, 60] |(499,) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.993049194235 |0.71548559112
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(1262, 1262), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(1262, 1262) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.999019117218 |0.804374763323
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(882, 882, 882), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(882, 882, 882) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.995832840139 |0.774003570883
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(777, 777, 777), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(777, 777, 777) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.994713266987 |0.8000773884
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(459,), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 2, 6, 8, 20, 40, 60] |(459,) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.992227170606 |0.712703642606
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(1292, 1292, 1292), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 2, 6, 8, 20, 40, 60] |(1292, 1292, 1292) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |2.1232672065e-08 |-1.03711362185
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(876,), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 2, 6, 8, 20, 40, 60] |(876,) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.99877994441 |0.724117636096
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(942,), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 2, 6, 8, 20, 40, 60] |(942,) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.99877995407 |0.72260009476
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(339, 339), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 10, 18, 40, 60, 90] |(339, 339) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.995338963622 |0.801838855296
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(743, 743), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 10, 18, 40, 60, 90] |(743, 743) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.998694510268 |0.802796552687
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(905,), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 10, 18, 40, 60, 90] |(905,) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.999251618652 |0.752033456718
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(660,), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(660,) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.994631415269 |0.744006900286
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(903, 903, 903), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 10, 18, 40, 60, 90] |(903, 903, 903) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.997192695651 |0.808017896842
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(303,), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(303,) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.980784509104 |0.767938682026
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(342, 342), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 10, 18, 40, 60, 90] |(342, 342) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.994915173398 |0.795641901015
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(1101, 1101), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 2, 6, 8, 20, 40, 60] |(1101, 1101) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.998599437339 |0.768199120714
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(380, 380), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 2, 6, 8, 20, 40, 60] |(380, 380) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.995536171394 |0.732215405152
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(433,), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 10, 18, 40, 60, 90] |(433,) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.994718081828 |0.739409585002
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(533, 533, 533), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 2, 6, 8, 20, 40, 60] |(533, 533, 533) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.994565105179 |0.789242593911
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(636, 636, 636), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 10, 18, 40, 60, 90] |(636, 636, 636) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.99419459577 |0.770844651928
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(1095, 1095, 1095), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 2, 6, 8, 20, 40, 60] |(1095, 1095, 1095) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |-2.03719689356e-05 |-1.02078278976
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(341,), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(341,) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.985526546702 |0.756603744718
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(1299, 1299), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(1299, 1299) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.998671618121 |0.802415606952
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(915,), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(915,) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.997823153929 |0.742626730315
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(683,), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 2, 6, 8, 20, 40, 60] |(683,) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.997156374878 |0.717703605502
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(674, 674), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 2, 6, 8, 20, 40, 60] |(674, 674) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.994995836132 |0.805025912151
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(506, 506), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(506, 506) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.996815396076 |0.817620227327
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(738, 738, 738), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(738, 738, 738) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.995961122788 |0.820072906644
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(1119,), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(1119,) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.999016051755 |0.75027120657
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(1163, 1163, 1163), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 10, 18, 40, 60, 90] |(1163, 1163, 1163) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |-8.64171841419e-07 |-1.02195506411
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(1150, 1150), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 10, 18, 40, 60, 90] |(1150, 1150) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.998328346788 |0.803453169926
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(699,), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(699,) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.996548362496 |0.733556892233
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(782, 782), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 10, 18, 40, 60, 90] |(782, 782) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.998279351917 |0.797430776595
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(536,), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 2, 6, 8, 20, 40, 60] |(536,) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.992809605205 |0.743129686948
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(1411, 1411), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 10, 18, 40, 60, 90] |(1411, 1411) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.998096519228 |0.825951895226
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(896, 896, 896), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 2, 6, 8, 20, 40, 60] |(896, 896, 896) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.996059659597 |0.768180895141
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(717, 717, 717), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 2, 6, 8, 20, 40, 60] |(717, 717, 717) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.995913961379 |0.797203301088
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(1175, 1175, 1175), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 10, 18, 40, 60, 90] |(1175, 1175, 1175) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |-9.14480298839e-05 |-0.99215745497
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(1014,), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 2, 6, 8, 20, 40, 60] |(1014,) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.999146065551 |0.721644779425
