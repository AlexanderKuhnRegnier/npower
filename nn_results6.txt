MLPRegressor(activation='relu', alpha=9.29097770776e-05, batch_size='auto',        beta_1=0.893986339273, beta_2=0.946207819294, early_stopping=False,        epsilon=8.10216572647e-08, hidden_layer_sizes=(14, 17, 17, 11, 19),        learning_rate='constant', learning_rate_init=0.000779095015601,        max_iter=10000, momentum=0.9, nesterovs_momentum=True, power_t=0.5,        random_state=80, shuffle=True, solver='adam', tol=1e-08,        validation_fraction=0.1, verbose=False, warm_start=False)
[0, 24, 48, 72, 96, 120, 144, 168, 192, 216, 240, 264, 288, 312, 336, 360, 384, 408, 432, 456, 480, 504, 528, 552, 576, 600, 624, 648, 672, 696, 720, 744, 768, 792, 816, 840, 864, 888, 912, 936, 960, 984, 1008, 1032, 1056, 1080, 1104, 1128, 1152, 1176, 1200, 1224, 1248, 1272, 1296, 1320, 1344, 1368, 1392, 1416, 1440, 1464, 1488, 1512, 1536, 1560, 1584, 1608, 1632, 1656, 1680, 1704, 1728, 1752, 1776, 1800, 1824, 1848, 1872, 1896, 1920, 1944, 1968, 1992, 2016, 2040, 2064, 2088, 2112, 2136, 2160, 2184, 2208, 2232, 2256, 2280, 2304] |(14, 17, 17, 11, 19) |relu |constant |0.893986339273 |0.946207819294 |8.10216572647e-08 |0.000779095015601 |9.29097770776e-05 |0.989571041168 |0.796093719573
MLPRegressor(activation='relu', alpha=9.80164769387e-05, batch_size='auto',        beta_1=0.853414678148, beta_2=0.975850612894, early_stopping=False,        epsilon=7.48084303015e-08, hidden_layer_sizes=(19, 13, 19, 16),        learning_rate='constant', learning_rate_init=0.00109073464537,        max_iter=10000, momentum=0.9, nesterovs_momentum=True, power_t=0.5,        random_state=96, shuffle=True, solver='adam', tol=1e-08,        validation_fraction=0.1, verbose=False, warm_start=False)
[0, 20, 40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240, 260, 280, 300, 320, 340, 360, 380, 400, 420, 440, 460, 480, 500, 520, 540, 560, 580, 600, 620, 640, 660, 680, 700, 720, 740, 760, 780, 800, 820, 840, 860, 880, 900, 920, 940, 960, 980, 1000, 1020, 1040, 1060, 1080, 1100, 1120, 1140, 1160, 1180, 1200, 1220, 1240, 1260, 1280, 1300, 1320, 1340, 1360, 1380, 1400, 1420, 1440, 1460, 1480, 1500, 1520, 1540, 1560, 1580, 1600, 1620, 1640, 1660, 1680, 1700, 1720, 1740, 1760, 1780, 1800, 1820, 1840, 1860, 1880, 1900, 1920, 1940, 1960, 1980, 2000, 2020, 2040, 2060, 2080, 2100, 2120, 2140, 2160, 2180, 2200, 2220, 2240] |(19, 13, 19, 16) |relu |constant |0.853414678148 |0.975850612894 |7.48084303015e-08 |0.00109073464537 |9.80164769387e-05 |0.994722089587 |0.70026183857
MLPRegressor(activation='logistic', alpha=0.00011959220404, batch_size='auto',        beta_1=0.92217623598, beta_2=0.979635364588, early_stopping=False,        epsilon=6.01745730053e-08, hidden_layer_sizes=(12, 11, 11),        learning_rate='constant', learning_rate_init=0.00142405468866,        max_iter=10000, momentum=0.9, nesterovs_momentum=True, power_t=0.5,        random_state=28, shuffle=True, solver='adam', tol=1e-08,        validation_fraction=0.1, verbose=False, warm_start=False)
[0, 68, 136, 204, 272, 340, 408, 476, 544, 612, 680, 748, 816, 884, 952, 1020, 1088, 1156, 1224] |(12, 11, 11) |logistic |constant |0.92217623598 |0.979635364588 |6.01745730053e-08 |0.00142405468866 |0.00011959220404 |0.962866905868 |0.835769450253
MLPRegressor(activation='logistic', alpha=9.20479768305e-05,        batch_size='auto', beta_1=0.85080223972, beta_2=0.968415412664,        early_stopping=False, epsilon=2.86701750448e-08,        hidden_layer_sizes=(10, 11, 12, 18, 17, 10),        learning_rate='constant', learning_rate_init=0.000706123197001,        max_iter=10000, momentum=0.9, nesterovs_momentum=True, power_t=0.5,        random_state=21, shuffle=True, solver='adam', tol=1e-08,        validation_fraction=0.1, verbose=False, warm_start=False)
[0, 32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448, 480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120, 1152, 1184, 1216, 1248, 1280, 1312, 1344, 1376] |(10, 11, 12, 18, 17, 10) |logistic |constant |0.85080223972 |0.968415412664 |2.86701750448e-08 |0.000706123197001 |9.20479768305e-05 |-5.50923307197e-07 |-0.763269672937
MLPRegressor(activation='logistic', alpha=0.000111064640269,        batch_size='auto', beta_1=0.918629580592, beta_2=0.931802781286,        early_stopping=False, epsilon=8.81069857526e-08,        hidden_layer_sizes=(10, 18, 14, 18, 17), learning_rate='constant',        learning_rate_init=0.00110892283, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=54, shuffle=True,        solver='adam', tol=1e-08, validation_fraction=0.1, verbose=False,        warm_start=False)
[0, 24, 48, 72, 96, 120, 144, 168, 192, 216, 240, 264, 288, 312, 336, 360, 384, 408, 432, 456, 480, 504, 528, 552, 576, 600, 624, 648, 672, 696, 720, 744, 768] |(10, 18, 14, 18, 17) |logistic |constant |0.918629580592 |0.931802781286 |8.81069857526e-08 |0.00110892283 |0.000111064640269 |-8.35599883509e-07 |-0.871761173978
MLPRegressor(activation='logistic', alpha=9.4380592343e-05, batch_size='auto',        beta_1=0.882228840713, beta_2=0.998295884367, early_stopping=False,        epsilon=9.98894476666e-08, hidden_layer_sizes=(13,),        learning_rate='adaptive', learning_rate_init=0.00140332237654,        max_iter=10000, momentum=0.9, nesterovs_momentum=True, power_t=0.5,        random_state=0, shuffle=True, solver='adam', tol=1e-08,        validation_fraction=0.1, verbose=False, warm_start=False)
[0, 12, 24, 36, 48, 60, 72, 84, 96, 108, 120, 132, 144, 156, 168, 180, 192, 204, 216, 228, 240] |(13,) |logistic |adaptive |0.882228840713 |0.998295884367 |9.98894476666e-08 |0.00140332237654 |9.4380592343e-05 |0.943645591619 |0.769890912651
MLPRegressor(activation='relu', alpha=8.27115180001e-05, batch_size='auto',        beta_1=0.883683984572, beta_2=0.978542605319, early_stopping=False,        epsilon=8.33174713974e-08,        hidden_layer_sizes=(17, 13, 19, 13, 14, 11),        learning_rate='adaptive', learning_rate_init=0.000961248989789,        max_iter=10000, momentum=0.9, nesterovs_momentum=True, power_t=0.5,        random_state=30, shuffle=True, solver='adam', tol=1e-08,        validation_fraction=0.1, verbose=False, warm_start=False)
[0, 72, 144, 216, 288, 360, 432, 504, 576, 648, 720, 792, 864, 936, 1008, 1080, 1152, 1224, 1296, 1368, 1440, 1512, 1584, 1656, 1728, 1800, 1872, 1944] |(17, 13, 19, 13, 14, 11) |relu |adaptive |0.883683984572 |0.978542605319 |8.33174713974e-08 |0.000961248989789 |8.27115180001e-05 |0.976544902946 |0.80655776465
MLPRegressor(activation='relu', alpha=0.000110362680535, batch_size='auto',        beta_1=0.852352182701, beta_2=0.931566177423, early_stopping=False,        epsilon=1.23717128532e-07,        hidden_layer_sizes=(11, 15, 11, 18, 10, 13),        learning_rate='adaptive', learning_rate_init=0.00146735479736,        max_iter=10000, momentum=0.9, nesterovs_momentum=True, power_t=0.5,        random_state=57, shuffle=True, solver='adam', tol=1e-10,        validation_fraction=0.1, verbose=False, warm_start=False)
[0, 32, 64, 96, 128, 160, 192, 224, 256] |(11, 15, 11, 18, 10, 13) |relu |adaptive |0.852352182701 |0.931566177423 |1.23717128532e-07 |0.00146735479736 |0.000110362680535 |0.946611030573 |0.806765293888
MLPRegressor(activation='relu', alpha=0.000100228993983, batch_size='auto',        beta_1=0.858909300348, beta_2=0.95299938886, early_stopping=False,        epsilon=1.04375531254e-07, hidden_layer_sizes=(17,),        learning_rate='adaptive', learning_rate_init=0.000578573720515,        max_iter=10000, momentum=0.9, nesterovs_momentum=True, power_t=0.5,        random_state=96, shuffle=True, solver='adam', tol=1e-10,        validation_fraction=0.1, verbose=False, warm_start=False)
[0, 64, 128, 192, 256] |(17,) |relu |adaptive |0.858909300348 |0.95299938886 |1.04375531254e-07 |0.000578573720515 |0.000100228993983 |0.937092929782 |0.795146796133
MLPRegressor(activation='relu', alpha=0.000121531954819, batch_size='auto',        beta_1=0.927497583757, beta_2=0.999844681921, early_stopping=False,        epsilon=8.61213204337e-08,        hidden_layer_sizes=(1792, 4955, 4287, 1868),        learning_rate='constant', learning_rate_init=0.00137211427644,        max_iter=10000, momentum=0.9, nesterovs_momentum=True, power_t=0.5,        random_state=44, shuffle=True, solver='adam', tol=1e-10,        validation_fraction=0.1, verbose=True, warm_start=False)
[0, 68, 136, 204, 272, 340, 408, 476, 544, 612, 680, 748, 816, 884, 952, 1020, 1088, 1156, 1224, 1292, 1360, 1428, 1496, 1564, 1632, 1700, 1768, 1836] |(1792, 4955, 4287, 1868) |relu |constant |0.927497583757 |0.999844681921 |8.61213204337e-08 |0.00137211427644 |0.000121531954819 |0.996328399569 |0.863901246354
MLPRegressor(activation='relu', alpha=9.10780858215e-05, batch_size='auto',        beta_1=0.853969791317, beta_2=0.95007826035, early_stopping=False,        epsilon=9.39138231411e-08, hidden_layer_sizes=(2291, 2866, 2064),        learning_rate='adaptive', learning_rate_init=0.00109700803288,        max_iter=10000, momentum=0.9, nesterovs_momentum=True, power_t=0.5,        random_state=92, shuffle=True, solver='adam', tol=1e-10,        validation_fraction=0.1, verbose=True, warm_start=False)
[0, 80, 160, 240, 320, 400, 480, 560, 640, 720, 800, 880, 960, 1040, 1120, 1200, 1280, 1360] |(2291, 2866, 2064) |relu |adaptive |0.853969791317 |0.95007826035 |9.39138231411e-08 |0.00109700803288 |9.10780858215e-05 |0.998075827304 |0.874905637568
MLPRegressor(activation='relu', alpha=9.07401272072e-05, batch_size='auto',        beta_1=0.923349745863, beta_2=0.971386983701, early_stopping=False,        epsilon=1.20259136469e-07, hidden_layer_sizes=(53,),        learning_rate='adaptive', learning_rate_init=0.00114295773345,        max_iter=10000, momentum=0.9, nesterovs_momentum=True, power_t=0.5,        random_state=79, shuffle=True, solver='adam', tol=1e-10,        validation_fraction=0.1, verbose=True, warm_start=False)
[0, 12, 24, 36, 48, 60, 72, 84, 96] |(53,) |relu |adaptive |0.923349745863 |0.971386983701 |1.20259136469e-07 |0.00114295773345 |9.07401272072e-05 |0.960405797477 |0.7644913928
MLPRegressor(activation='relu', alpha=0.000108574729369, batch_size='auto',        beta_1=0.91449028386, beta_2=0.936094024741, early_stopping=False,        epsilon=5.37646124191e-08, hidden_layer_sizes=(1320, 1453),        learning_rate='adaptive', learning_rate_init=0.000560972857903,        max_iter=10000, momentum=0.9, nesterovs_momentum=True, power_t=0.5,        random_state=10, shuffle=True, solver='adam', tol=1e-10,        validation_fraction=0.1, verbose=True, warm_start=False)
[0, 8, 16, 24, 32, 40, 48, 56] |(1320, 1453) |relu |adaptive |0.91449028386 |0.936094024741 |5.37646124191e-08 |0.000560972857903 |0.000108574729369 |0.995016741173 |0.828947653026
MLPRegressor(activation='logistic', alpha=0.000113777494696,        batch_size='auto', beta_1=0.899944824213, beta_2=0.947422433958,        early_stopping=False, epsilon=1.32321811502e-08,        hidden_layer_sizes=(1345,), learning_rate='adaptive',        learning_rate_init=0.00144099871589, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=52, shuffle=True,        solver='adam', tol=1e-10, validation_fraction=0.1, verbose=True,        warm_start=False)
[0, 4] |(1345,) |logistic |adaptive |0.899944824213 |0.947422433958 |1.32321811502e-08 |0.00144099871589 |0.000113777494696 |0.982963543522 |0.768849330621
MLPRegressor(activation='logistic', alpha=7.10796240574e-05,        batch_size='auto', beta_1=0.861129891068, beta_2=0.984770648104,        early_stopping=False, epsilon=3.04451591539e-08,        hidden_layer_sizes=(1454, 1216), learning_rate='adaptive',        learning_rate_init=0.000530573056818, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=37, shuffle=True,        solver='adam', tol=1e-10, validation_fraction=0.1, verbose=True,        warm_start=False)
[0, 20, 40, 60, 80, 100, 120, 140, 160, 180, 200] |(1454, 1216) |logistic |adaptive |0.861129891068 |0.984770648104 |3.04451591539e-08 |0.000530573056818 |7.10796240574e-05 |0.999269161209 |0.795641836832
MLPRegressor(activation='relu', alpha=9.34473220982e-05, batch_size='auto',        beta_1=0.86649839411, beta_2=0.984330851335, early_stopping=False,        epsilon=1.24700051937e-08, hidden_layer_sizes=(199, 480),        learning_rate='constant', learning_rate_init=0.000747802884002,        max_iter=10000, momentum=0.9, nesterovs_momentum=True, power_t=0.5,        random_state=5, shuffle=True, solver='adam', tol=1e-10,        validation_fraction=0.1, verbose=True, warm_start=False)
[0, 8, 16, 24, 32, 40, 48, 56, 64, 72] |(199, 480) |relu |constant |0.86649839411 |0.984330851335 |1.24700051937e-08 |0.000747802884002 |9.34473220982e-05 |0.995534353701 |0.766982808078
MLPRegressor(activation='logistic', alpha=7.29928274953e-05,        batch_size='auto', beta_1=0.868184146673, beta_2=0.980314576138,        early_stopping=False, epsilon=3.479611774e-08,        hidden_layer_sizes=(1375,), learning_rate='constant',        learning_rate_init=0.000588723328023, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=26, shuffle=True,        solver='adam', tol=1e-10, validation_fraction=0.1, verbose=True,        warm_start=False)
[0, 8, 16, 24, 32, 40, 48, 56] |(1375,) |logistic |constant |0.868184146673 |0.980314576138 |3.479611774e-08 |0.000588723328023 |7.29928274953e-05 |0.9998602849 |0.735441025121
MLPRegressor(activation='relu', alpha=8.61630778119e-05, batch_size='auto',        beta_1=0.908139767761, beta_2=0.983429877042, early_stopping=False,        epsilon=3.08731981652e-08, hidden_layer_sizes=(66, 102),        learning_rate='adaptive', learning_rate_init=0.000682082848773,        max_iter=10000, momentum=0.9, nesterovs_momentum=True, power_t=0.5,        random_state=23, shuffle=True, solver='adam', tol=1e-10,        validation_fraction=0.1, verbose=True, warm_start=False)
[0, 20, 40, 60, 80, 100, 120, 140, 160, 180, 200] |(66, 102) |relu |adaptive |0.908139767761 |0.983429877042 |3.08731981652e-08 |0.000682082848773 |8.61630778119e-05 |0.985421887839 |0.773200757612
MLPRegressor(activation='logistic', alpha=0.000126223223087,        batch_size='auto', beta_1=0.899555145557, beta_2=0.970549867382,        early_stopping=False, epsilon=5.39604388272e-08,        hidden_layer_sizes=(889,), learning_rate='adaptive',        learning_rate_init=0.00137740459177, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=9, shuffle=True,        solver='adam', tol=1e-10, validation_fraction=0.1, verbose=True,        warm_start=False)
[0, 12, 24, 36, 48, 60, 72, 84, 96, 108, 120] |(889,) |logistic |adaptive |0.899555145557 |0.970549867382 |5.39604388272e-08 |0.00137740459177 |0.000126223223087 |0.999750202446 |0.757059538221
MLPRegressor(activation='relu', alpha=7.32315344921e-05, batch_size='auto',        beta_1=0.920302552632, beta_2=0.985093098344, early_stopping=False,        epsilon=3.55155178816e-08, hidden_layer_sizes=(1425,),        learning_rate='adaptive', learning_rate_init=0.000569539210394,        max_iter=10000, momentum=0.9, nesterovs_momentum=True, power_t=0.5,        random_state=75, shuffle=True, solver='adam', tol=1e-10,        validation_fraction=0.1, verbose=True, warm_start=False)
[0, 8, 16, 24, 32, 40] |(1425,) |relu |adaptive |0.920302552632 |0.985093098344 |3.55155178816e-08 |0.000569539210394 |7.32315344921e-05 |0.990957526691 |0.788771975797
MLPRegressor(activation='relu', alpha=0.000126493375753, batch_size='auto',        beta_1=0.85341096636, beta_2=0.972199516958, early_stopping=False,        epsilon=9.8415289284e-08, hidden_layer_sizes=(858,),        learning_rate='constant', learning_rate_init=0.00110725963165,        max_iter=10000, momentum=0.9, nesterovs_momentum=True, power_t=0.5,        random_state=85, shuffle=True, solver='adam', tol=1e-10,        validation_fraction=0.1, verbose=True, warm_start=False)
[0, 12, 24, 36, 48, 60, 72, 84, 96, 108, 120, 132] |(858,) |relu |constant |0.85341096636 |0.972199516958 |9.8415289284e-08 |0.00110725963165 |0.000126493375753 |0.995051669563 |0.783817283558
MLPRegressor(activation='relu', alpha=0.000110446338856, batch_size='auto',        beta_1=0.900941983521, beta_2=0.96831143025, early_stopping=False,        epsilon=5.73425627582e-08, hidden_layer_sizes=(27,),        learning_rate='constant', learning_rate_init=0.000757869328043,        max_iter=10000, momentum=0.9, nesterovs_momentum=True, power_t=0.5,        random_state=9, shuffle=True, solver='adam', tol=1e-10,        validation_fraction=0.1, verbose=True, warm_start=False)
[0, 8, 16, 24, 32] |(27,) |relu |constant |0.900941983521 |0.96831143025 |5.73425627582e-08 |0.000757869328043 |0.000110446338856 |0.94115869638 |0.800532813134
MLPRegressor(activation='logistic', alpha=0.000105366683827,        batch_size='auto', beta_1=0.883558160502, beta_2=0.994212143253,        early_stopping=False, epsilon=5.09660418699e-08,        hidden_layer_sizes=(246,), learning_rate='adaptive',        learning_rate_init=0.000581275570974, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=80, shuffle=True,        solver='adam', tol=1e-10, validation_fraction=0.1, verbose=True,        warm_start=False)
[0, 12, 24, 36, 48, 60, 72, 84, 96] |(246,) |logistic |adaptive |0.883558160502 |0.994212143253 |5.09660418699e-08 |0.000581275570974 |0.000105366683827 |0.991844902507 |0.733913896514
MLPRegressor(activation='logistic', alpha=9.54655017184e-05,        batch_size='auto', beta_1=0.891567296677, beta_2=0.933419914597,        early_stopping=False, epsilon=1.14994567931e-07,        hidden_layer_sizes=(481,), learning_rate='constant',        learning_rate_init=0.000663600548579, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=51, shuffle=True,        solver='adam', tol=1e-10, validation_fraction=0.1, verbose=True,        warm_start=False)
[0, 16, 32, 48, 64, 80, 96, 112, 128, 144] |(481,) |logistic |constant |0.891567296677 |0.933419914597 |1.14994567931e-07 |0.000663600548579 |9.54655017184e-05 |0.999134445275 |0.736474742736
MLPRegressor(activation='relu', alpha=9.31395485312e-05, batch_size='auto',        beta_1=0.896003693271, beta_2=0.930013845421, early_stopping=False,        epsilon=9.05530292181e-08, hidden_layer_sizes=(452,),        learning_rate='constant', learning_rate_init=0.00148326784925,        max_iter=10000, momentum=0.9, nesterovs_momentum=True, power_t=0.5,        random_state=36, shuffle=True, solver='adam', tol=1e-10,        validation_fraction=0.1, verbose=True, warm_start=False)
[0, 8, 16, 24, 32, 40, 48] |(452,) |relu |constant |0.896003693271 |0.930013845421 |9.05530292181e-08 |0.00148326784925 |9.31395485312e-05 |0.976275792539 |0.801481898236
MLPRegressor(activation='logistic', alpha=0.000100750584674,        batch_size='auto', beta_1=0.866468296269, beta_2=0.989807589203,        early_stopping=False, epsilon=1.22832890361e-07,        hidden_layer_sizes=(1094,), learning_rate='adaptive',        learning_rate_init=0.00136870921407, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=49, shuffle=True,        solver='adam', tol=1e-10, validation_fraction=0.1, verbose=True,        warm_start=False)
[0, 4, 8, 12, 16, 20] |(1094,) |logistic |adaptive |0.866468296269 |0.989807589203 |1.22832890361e-07 |0.00136870921407 |0.000100750584674 |0.996564844956 |0.706931727183
MLPRegressor(activation='relu', alpha=9.00235820227e-05, batch_size='auto',        beta_1=0.858041670559, beta_2=0.988885480458, early_stopping=False,        epsilon=8.58401750487e-08, hidden_layer_sizes=(69, 1313),        learning_rate='adaptive', learning_rate_init=0.000517528864223,        max_iter=10000, momentum=0.9, nesterovs_momentum=True, power_t=0.5,        random_state=90, shuffle=True, solver='adam', tol=1e-10,        validation_fraction=0.1, verbose=True, warm_start=False)
[0, 8, 16, 24] |(69, 1313) |relu |adaptive |0.858041670559 |0.988885480458 |8.58401750487e-08 |0.000517528864223 |9.00235820227e-05 |0.974507444835 |0.7793669149
MLPRegressor(activation='relu', alpha=9.6210577831e-05, batch_size='auto',        beta_1=0.909787195373, beta_2=0.979877664752, early_stopping=False,        epsilon=1.59425133507e-08, hidden_layer_sizes=(130, 129),        learning_rate='adaptive', learning_rate_init=0.000674975669746,        max_iter=10000, momentum=0.9, nesterovs_momentum=True, power_t=0.5,        random_state=79, shuffle=True, solver='adam', tol=1e-10,        validation_fraction=0.1, verbose=True, warm_start=False)
[0, 12, 24, 36, 48, 60, 72, 84, 96] |(130, 129) |relu |adaptive |0.909787195373 |0.979877664752 |1.59425133507e-08 |0.000674975669746 |9.6210577831e-05 |0.986786778384 |0.743501844717
MLPRegressor(activation='logistic', alpha=7.1108633953e-05, batch_size='auto',        beta_1=0.9273242742, beta_2=0.933884480757, early_stopping=False,        epsilon=7.73552736336e-08, hidden_layer_sizes=(919, 413),        learning_rate='adaptive', learning_rate_init=0.00104717999574,        max_iter=10000, momentum=0.9, nesterovs_momentum=True, power_t=0.5,        random_state=6, shuffle=True, solver='adam', tol=1e-10,        validation_fraction=0.1, verbose=True, warm_start=False)
[0, 20, 40, 60, 80, 100, 120, 140, 160, 180, 200, 220] |(919, 413) |logistic |adaptive |0.9273242742 |0.933884480757 |7.73552736336e-08 |0.00104717999574 |7.1108633953e-05 |0.998902887461 |0.787387480882
MLPRegressor(activation='logistic', alpha=9.03316963541e-05,        batch_size='auto', beta_1=0.911550921824, beta_2=0.940144171337,        early_stopping=False, epsilon=1.21511345353e-07,        hidden_layer_sizes=(575, 527), learning_rate='constant',        learning_rate_init=0.000829440383622, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=91, shuffle=True,        solver='adam', tol=1e-10, validation_fraction=0.1, verbose=True,        warm_start=False)
[0, 8, 16, 24] |(575, 527) |logistic |constant |0.911550921824 |0.940144171337 |1.21511345353e-07 |0.000829440383622 |9.03316963541e-05 |0.997314766017 |0.782240593483
MLPRegressor(activation='logistic', alpha=8.06854840386e-05,        batch_size='auto', beta_1=0.881830931868, beta_2=0.991220984528,        early_stopping=False, epsilon=8.25819949448e-08,        hidden_layer_sizes=(791, 913), learning_rate='constant',        learning_rate_init=0.000967906965817, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=97, shuffle=True,        solver='adam', tol=1e-10, validation_fraction=0.1, verbose=True,        warm_start=False)
[0, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 176] |(791, 913) |logistic |constant |0.881830931868 |0.991220984528 |8.25819949448e-08 |0.000967906965817 |8.06854840386e-05 |0.998042451708 |0.801561037623
MLPRegressor(activation='logistic', alpha=9.87938231863e-05,        batch_size='auto', beta_1=0.888397978702, beta_2=0.945186371773,        early_stopping=False, epsilon=4.06266227571e-08,        hidden_layer_sizes=(554, 1146), learning_rate='constant',        learning_rate_init=0.00147973047463, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=43, shuffle=True,        solver='adam', tol=1e-10, validation_fraction=0.1, verbose=True,        warm_start=False)
[0, 20, 40, 60, 80, 100, 120, 140, 160, 180, 200, 220] |(554, 1146) |logistic |constant |0.888397978702 |0.945186371773 |4.06266227571e-08 |0.00147973047463 |9.87938231863e-05 |0.999132018727 |0.769548958037
