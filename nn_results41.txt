MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(571,), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(571,) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.993424380384 |0.745308478265
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(530, 530), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(530, 530) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.993232286993 |0.808496495182
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(901, 901, 901), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(901, 901, 901) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.993631790736 |0.79765930672
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(348,), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(348,) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.985416290603 |0.742643109867
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(67,), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(67,) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.955754884421 |0.803932940669
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(293, 293, 293), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(293, 293, 293) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.983357535272 |0.757962160911
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(650, 650), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(650, 650) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.995181846812 |0.814429148298
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(182, 182, 182), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(182, 182, 182) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.967732406067 |0.781527333309
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(695, 695), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(695, 695) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.998682812029 |0.807674744601
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(397,), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(397,) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.986884845905 |0.75455737802
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(241, 241), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(241, 241) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.987992793786 |0.807793128474
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(448,), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(448,) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.989780788476 |0.72094311501
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(928,), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(928,) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.998225236989 |0.748643160417
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(51, 51), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(51, 51) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.965617221993 |0.821242232256
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(443,), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(443,) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.988383277921 |0.737981790879
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(643, 643), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(643, 643) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.997467738153 |0.800023680479
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(222,), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(222,) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.975456688193 |0.778589273729
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(820, 820), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(820, 820) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.995878391808 |0.813686577197
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(859,), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(859,) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.997885026856 |0.720029848164
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(43, 43), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(43, 43) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.958462387026 |0.808669161066
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(331,), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(331,) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.983081922701 |0.757044848744
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(54,), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(54,) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.952887498138 |0.807716966127
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(467, 467), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(467, 467) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.996565174987 |0.814244563972
