MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(990,), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 8, 12, 16, 20, 30, 40] |(990,) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.999216739731 |0.714578972379
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(3871, 3871), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 8, 12, 16, 20, 30, 40] |(3871, 3871) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |-0.000529502100682 |-0.955030342823
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(2135, 2135, 2135), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 8, 12, 16, 20, 30, 40] |(2135, 2135, 2135) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |-0.000424115756176 |-1.10849938679
MLPRegressor(activation='relu', alpha=0.0001, batch_size='auto', beta_1=0.9,        beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(2291, 2866, 2064), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 8, 12, 40, 80, 160, 240, 400, 560, 720, 800, 960, 1120, 1360] |(2291, 2866, 2064) |relu |adaptive |0.853969791317 |0.95007826035 |9.39138231411e-08 |0.00109700803288 |9.10780858215e-05 |0.831302466798 |0.621696390464
