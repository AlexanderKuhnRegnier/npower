MLPRegressor(activation='logistic', alpha=7.99591835813e-05,        batch_size='auto', beta_1=0.885225005804, beta_2=0.957952132425,        early_stopping=False, epsilon=8.66198300692e-08,        hidden_layer_sizes=(383, 1406), learning_rate='adaptive',        learning_rate_init=0.000774813449864, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=86, shuffle=True,        solver='adam', tol=1e-10, validation_fraction=0.1, verbose=True,        warm_start=False)
[0, 8, 16, 24] |(383, 1406) |logistic |adaptive |0.885225005804 |0.957952132425 |8.66198300692e-08 |0.000774813449864 |7.99591835813e-05 |0.9903109293 |0.770546685226
MLPRegressor(activation='relu', alpha=9.13987850159e-05, batch_size='auto',        beta_1=0.92200673387, beta_2=0.94069173046, early_stopping=False,        epsilon=2.39832259597e-08, hidden_layer_sizes=(616, 68),        learning_rate='adaptive', learning_rate_init=0.000952472732821,        max_iter=10000, momentum=0.9, nesterovs_momentum=True, power_t=0.5,        random_state=91, shuffle=True, solver='adam', tol=1e-10,        validation_fraction=0.1, verbose=True, warm_start=False)
[0, 8, 16, 24, 32, 40, 48] |(616, 68) |relu |adaptive |0.92200673387 |0.94069173046 |2.39832259597e-08 |0.000952472732821 |9.13987850159e-05 |0.987852277556 |0.80380705352
MLPRegressor(activation='relu', alpha=9.25287609206e-05, batch_size='auto',        beta_1=0.921093489401, beta_2=0.993329977152, early_stopping=False,        epsilon=6.21543471031e-08, hidden_layer_sizes=(1276, 941),        learning_rate='constant', learning_rate_init=0.00125340655627,        max_iter=10000, momentum=0.9, nesterovs_momentum=True, power_t=0.5,        random_state=42, shuffle=True, solver='adam', tol=1e-10,        validation_fraction=0.1, verbose=True, warm_start=False)
[0, 12, 24, 36, 48, 60, 72, 84, 96, 108, 120] |(1276, 941) |relu |constant |0.921093489401 |0.993329977152 |6.21543471031e-08 |0.00125340655627 |9.25287609206e-05 |0.931647391615 |0.785059968153
