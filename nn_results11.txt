MLPRegressor(activation='logistic', alpha=8.46031378003e-05,        batch_size='auto', beta_1=0.85907804162, beta_2=0.965466764258,        early_stopping=False, epsilon=9.1429327294e-08,        hidden_layer_sizes=(864,), learning_rate='adaptive',        learning_rate_init=0.00108723891786, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=11, shuffle=True,        solver='adam', tol=1e-10, validation_fraction=0.1, verbose=True,        warm_start=False)
[0, 12, 24, 36, 48, 60, 72, 84, 96, 108] |(864,) |logistic |adaptive |0.85907804162 |0.965466764258 |9.1429327294e-08 |0.00108723891786 |8.46031378003e-05 |0.999838672726 |0.748391918731
MLPRegressor(activation='logistic', alpha=0.000104381529977,        batch_size='auto', beta_1=0.878624971863, beta_2=0.952625993659,        early_stopping=False, epsilon=3.7858648633e-08,        hidden_layer_sizes=(265, 387), learning_rate='adaptive',        learning_rate_init=0.000693209676087, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=12, shuffle=True,        solver='adam', tol=1e-10, validation_fraction=0.1, verbose=True,        warm_start=False)
[0, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 176, 192] |(265, 387) |logistic |adaptive |0.878624971863 |0.952625993659 |3.7858648633e-08 |0.000693209676087 |0.000104381529977 |0.997612424536 |0.819165133968
MLPRegressor(activation='relu', alpha=0.000105737339387, batch_size='auto',        beta_1=0.890361029296, beta_2=0.939721912857, early_stopping=False,        epsilon=2.52587917631e-08, hidden_layer_sizes=(1336,),        learning_rate='adaptive', learning_rate_init=0.000681108918129,        max_iter=10000, momentum=0.9, nesterovs_momentum=True, power_t=0.5,        random_state=93, shuffle=True, solver='adam', tol=1e-10,        validation_fraction=0.1, verbose=True, warm_start=False)
[0, 8, 16, 24, 32, 40] |(1336,) |relu |adaptive |0.890361029296 |0.939721912857 |2.52587917631e-08 |0.000681108918129 |0.000105737339387 |0.889176989556 |0.740054988281
MLPRegressor(activation='relu', alpha=0.000119172591178, batch_size='auto',        beta_1=0.852760079207, beta_2=0.943453898895, early_stopping=False,        epsilon=6.9132417685e-08, hidden_layer_sizes=(685,),        learning_rate='constant', learning_rate_init=0.000682073174047,        max_iter=10000, momentum=0.9, nesterovs_momentum=True, power_t=0.5,        random_state=51, shuffle=True, solver='adam', tol=1e-10,        validation_fraction=0.1, verbose=True, warm_start=False)
[0, 20, 40, 60, 80, 100, 120, 140, 160, 180, 200, 220] |(685,) |relu |constant |0.852760079207 |0.943453898895 |6.9132417685e-08 |0.000682073174047 |0.000119172591178 |0.907701014447 |0.713292778502
MLPRegressor(activation='logistic', alpha=9.13907049142e-05,        batch_size='auto', beta_1=0.894883670705, beta_2=0.984924186246,        early_stopping=False, epsilon=1.15352280969e-07,        hidden_layer_sizes=(924,), learning_rate='constant',        learning_rate_init=0.00126991741062, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=62, shuffle=True,        solver='adam', tol=1e-10, validation_fraction=0.1, verbose=True,        warm_start=False)
[0, 8, 16, 24, 32, 40, 48] |(924,) |logistic |constant |0.894883670705 |0.984924186246 |1.15352280969e-07 |0.00126991741062 |9.13907049142e-05 |0.800861683563 |0.546539580664
MLPRegressor(activation='relu', alpha=0.000129092963329, batch_size='auto',        beta_1=0.86282712344, beta_2=0.952744510479, early_stopping=False,        epsilon=1.12221063468e-07, hidden_layer_sizes=(1126, 532),        learning_rate='constant', learning_rate_init=0.00138626867104,        max_iter=10000, momentum=0.9, nesterovs_momentum=True, power_t=0.5,        random_state=96, shuffle=True, solver='adam', tol=1e-10,        validation_fraction=0.1, verbose=True, warm_start=False)
[0, 12, 24, 36, 48, 60, 72, 84, 96, 108, 120, 132] |(1126, 532) |relu |constant |0.86282712344 |0.952744510479 |1.12221063468e-07 |0.00138626867104 |0.000129092963329 |0.996439744656 |0.813743564553
MLPRegressor(activation='logistic', alpha=0.000114150909475,        batch_size='auto', beta_1=0.865789080668, beta_2=0.969299283498,        early_stopping=False, epsilon=7.38748807872e-08,        hidden_layer_sizes=(680, 491), learning_rate='constant',        learning_rate_init=0.000501318486571, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=70, shuffle=True,        solver='adam', tol=1e-10, validation_fraction=0.1, verbose=True,        warm_start=False)
[0, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160] |(680, 491) |logistic |constant |0.865789080668 |0.969299283498 |7.38748807872e-08 |0.000501318486571 |0.000114150909475 |0.998801810316 |0.781666616723
MLPRegressor(activation='logistic', alpha=0.000128346615514,        batch_size='auto', beta_1=0.89639941189, beta_2=0.943298053304,        early_stopping=False, epsilon=8.8493787101e-08,        hidden_layer_sizes=(48,), learning_rate='constant',        learning_rate_init=0.00115045408318, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=5, shuffle=True,        solver='adam', tol=1e-10, validation_fraction=0.1, verbose=True,        warm_start=False)
[0, 12, 24, 36, 48, 60, 72, 84] |(48,) |logistic |constant |0.89639941189 |0.943298053304 |8.8493787101e-08 |0.00115045408318 |0.000128346615514 |0.9567093208 |0.795483485445
MLPRegressor(activation='relu', alpha=0.000103560992603, batch_size='auto',        beta_1=0.85624494065, beta_2=0.999399515413, early_stopping=False,        epsilon=7.69238716942e-09, hidden_layer_sizes=(573,),        learning_rate='adaptive', learning_rate_init=0.00119989690555,        max_iter=10000, momentum=0.9, nesterovs_momentum=True, power_t=0.5,        random_state=56, shuffle=True, solver='adam', tol=1e-10,        validation_fraction=0.1, verbose=True, warm_start=False)
[0, 12, 24, 36, 48, 60, 72, 84, 96, 108, 120, 132] |(573,) |relu |adaptive |0.85624494065 |0.999399515413 |7.69238716942e-09 |0.00119989690555 |0.000103560992603 |0.993407494781 |0.743999479523
