MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(500, 500), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(500, 500) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.995322387163 |0.800873719326
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(500, 500), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(500, 500) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.995544607385 |0.796613242561
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(500, 500, 500, 500), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(500, 500, 500, 500) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |-1.02659980454e-05 |-1.01046788588
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(500, 500, 500), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(500, 500, 500) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.993013533814 |0.836255588461
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(500, 500, 500, 500, 500),        learning_rate='adaptive', learning_rate_init=0.001, max_iter=10000,        momentum=0.9, nesterovs_momentum=True, power_t=0.5,        random_state=None, shuffle=True, solver='adam', tol=1e-10,        validation_fraction=0.1, verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(500, 500, 500, 500, 500) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |-3.74384446573e-05 |-1.00050105219
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(500, 500, 500, 500, 500),        learning_rate='adaptive', learning_rate_init=0.001, max_iter=10000,        momentum=0.9, nesterovs_momentum=True, power_t=0.5,        random_state=None, shuffle=True, solver='adam', tol=1e-10,        validation_fraction=0.1, verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(500, 500, 500, 500, 500) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |-3.32498396372e-07 |-1.02369609086
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(500, 500), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(500, 500) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.997831653908 |0.784216402238
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(500, 500, 500, 500), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(500, 500, 500, 500) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |-3.46543075413e-05 |-1.04234787605
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(500, 500, 500, 500), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(500, 500, 500, 500) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |-3.9845034461e-05 |-1.04386413629
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(500, 500, 500, 500), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(500, 500, 500, 500) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |-1.02013106411e-05 |-1.01045987314
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(500, 500, 500, 500, 500),        learning_rate='adaptive', learning_rate_init=0.001, max_iter=10000,        momentum=0.9, nesterovs_momentum=True, power_t=0.5,        random_state=None, shuffle=True, solver='adam', tol=1e-10,        validation_fraction=0.1, verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(500, 500, 500, 500, 500) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |-1.49634255431e-06 |-1.01743015169
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(500, 500, 500, 500), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(500, 500, 500, 500) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |-2.06816938975e-06 |-1.01621419128
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(500, 500, 500), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(500, 500, 500) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.9960900844 |0.792117402364
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(500, 500, 500, 500), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(500, 500, 500, 500) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |-5.22191984638e-05 |-1.04704159844
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(500, 500, 500, 500, 500),        learning_rate='adaptive', learning_rate_init=0.001, max_iter=10000,        momentum=0.9, nesterovs_momentum=True, power_t=0.5,        random_state=None, shuffle=True, solver='adam', tol=1e-10,        validation_fraction=0.1, verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(500, 500, 500, 500, 500) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |-7.03755292641e-06 |-1.01247233805
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(500, 500, 500, 500), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(500, 500, 500, 500) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |-2.11677220925e-05 |-1.00564254746
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(500, 500), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(500, 500) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.996119074753 |0.793902136908
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(500, 500), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(500, 500) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.997241179955 |0.811724332381
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(950, 950), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(950, 950) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.997628577193 |0.784713366493
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(500, 500), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(500, 500) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.997363094763 |0.804230710391
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(500, 500, 500, 500, 500),        learning_rate='adaptive', learning_rate_init=0.001, max_iter=10000,        momentum=0.9, nesterovs_momentum=True, power_t=0.5,        random_state=None, shuffle=True, solver='adam', tol=1e-10,        validation_fraction=0.1, verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(500, 500, 500, 500, 500) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |-4.60257765045e-05 |-0.998210373986
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(500, 500, 500, 500, 500),        learning_rate='adaptive', learning_rate_init=0.001, max_iter=10000,        momentum=0.9, nesterovs_momentum=True, power_t=0.5,        random_state=None, shuffle=True, solver='adam', tol=1e-10,        validation_fraction=0.1, verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(500, 500, 500, 500, 500) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |-8.94277525365e-07 |-1.01839322436
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(500, 500, 500, 500), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(500, 500, 500, 500) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |-6.31115938865e-06 |-1.03062546672
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(500, 500, 500, 500), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(500, 500, 500, 500) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |-1.49627099266e-06 |-1.01706666284
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(500, 500, 500, 500), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(500, 500, 500, 500) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |4.38716549311e-07 |-1.02150900455
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(1300, 1300), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(1300, 1300) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.997857697221 |0.773169400972
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(950, 950), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(950, 950) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.997824309617 |0.785352413424
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(1300, 1300, 1300, 1300),        learning_rate='adaptive', learning_rate_init=0.001, max_iter=10000,        momentum=0.9, nesterovs_momentum=True, power_t=0.5,        random_state=None, shuffle=True, solver='adam', tol=1e-10,        validation_fraction=0.1, verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(1300, 1300, 1300, 1300) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |-1.98126267303e-06 |-1.01679152368
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(500, 500, 500), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(500, 500, 500) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.988506183319 |0.786460348765
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(1300, 1300, 1300), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(1300, 1300, 1300) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |-0.000272465874893 |-0.965043872343
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(500, 500, 500, 500), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(500, 500, 500, 500) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |-8.53225102282e-06 |-1.01143799983
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(500, 500, 500, 500), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(500, 500, 500, 500) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |-4.91963757709e-06 |-1.01383679034
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(500, 500, 500, 500, 500),        learning_rate='adaptive', learning_rate_init=0.001, max_iter=10000,        momentum=0.9, nesterovs_momentum=True, power_t=0.5,        random_state=None, shuffle=True, solver='adam', tol=1e-10,        validation_fraction=0.1, verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(500, 500, 500, 500, 500) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |-7.75133116226e-06 |-1.01201722826
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(500, 500), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(500, 500) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.997134319498 |0.810309639846
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(950, 950), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(950, 950) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.998681876388 |0.795567698263
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(950, 950, 950), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(950, 950, 950) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |-7.53444627328e-05 |-0.991158010632
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(500, 500), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(500, 500) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.995148081401 |0.831143308415
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(950, 950), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(950, 950) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.943025699561 |0.836103440714
