MLPRegressor(activation='logistic', alpha=0.000124768904206,        batch_size='auto', beta_1=0.895908530596, beta_2=0.948300676167,        early_stopping=False, epsilon=1.17393633802e-07,        hidden_layer_sizes=(914,), learning_rate='adaptive',        learning_rate_init=0.00111348562357, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=42, shuffle=True,        solver='adam', tol=1e-10, validation_fraction=0.1, verbose=True,        warm_start=False)
[0, 4, 8, 12, 16, 20, 24] |(914,) |logistic |adaptive |0.895908530596 |0.948300676167 |1.17393633802e-07 |0.00111348562357 |0.000124768904206 |0.997580522985 |0.686825953756
MLPRegressor(activation='relu', alpha=0.000102180434993, batch_size='auto',        beta_1=0.927795087355, beta_2=0.935042587038, early_stopping=False,        epsilon=7.53577056525e-08, hidden_layer_sizes=(352, 1403),        learning_rate='adaptive', learning_rate_init=0.00103507323689,        max_iter=10000, momentum=0.9, nesterovs_momentum=True, power_t=0.5,        random_state=71, shuffle=True, solver='adam', tol=1e-10,        validation_fraction=0.1, verbose=True, warm_start=False)
[0, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 176, 192] |(352, 1403) |relu |adaptive |0.927795087355 |0.935042587038 |7.53577056525e-08 |0.00103507323689 |0.000102180434993 |0.996473054414 |0.759291363016
MLPRegressor(activation='relu', alpha=8.21052792496e-05, batch_size='auto',        beta_1=0.902885416956, beta_2=0.980851850686, early_stopping=False,        epsilon=1.24152710199e-07, hidden_layer_sizes=(634,),        learning_rate='adaptive', learning_rate_init=0.0010108277034,        max_iter=10000, momentum=0.9, nesterovs_momentum=True, power_t=0.5,        random_state=4, shuffle=True, solver='adam', tol=1e-10,        validation_fraction=0.1, verbose=True, warm_start=False)
[0, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 176] |(634,) |relu |adaptive |0.902885416956 |0.980851850686 |1.24152710199e-07 |0.0010108277034 |8.21052792496e-05 |0.993500870566 |0.794616298258
