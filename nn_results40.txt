MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(157, 87, 140, 249), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(157, 87, 140, 249) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.97276895904 |0.839353838876
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(431, 424, 427, 81), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(431, 424, 427, 81) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |-1.96911011163e-06 |-1.02659250529
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(78, 213, 366, 245), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(78, 213, 366, 245) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.957196578753 |0.810226648957
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(103, 227, 139, 463), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(103, 227, 139, 463) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.962429837215 |0.805551367791
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(485, 377, 40, 345), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(485, 377, 40, 345) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.99439406343 |0.822767660858
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(138, 469, 216, 192), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(138, 469, 216, 192) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.96975285902 |0.801005109354
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(217, 108, 407, 292), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(217, 108, 407, 292) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.976586523816 |0.81371410005
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(56, 631, 134, 552), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(56, 631, 134, 552) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.956780062511 |0.758315724614
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(927, 873, 190, 871), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(927, 873, 190, 871) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |-0.000271018091107 |-0.965194643874
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(500, 681, 633, 971), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(500, 681, 633, 971) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |3.25510749466e-08 |-1.02121771488
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(520, 520, 520, 520), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(520, 520, 520, 520) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |-2.80116431872e-05 |-1.00330106521
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(712, 712, 712, 712), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(712, 712, 712, 712) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |-5.53522512603e-06 |-1.01349533567
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(799, 799, 799, 799), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(799, 799, 799, 799) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |-6.6887218189e-05 |-1.05034762848
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(169, 169, 169, 169), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(169, 169, 169, 169) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.97936882579 |0.798519358924
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(354, 354, 354, 354), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(354, 354, 354, 354) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |2.29677900843e-06 |-1.02112522441
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(284, 284, 284, 284), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(284, 284, 284, 284) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.977336532466 |0.778818330581
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(230, 230, 230, 230), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(230, 230, 230, 230) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.974559277422 |0.840527445265
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(891, 891, 891, 891), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(891, 891, 891, 891) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |-2.40962302289e-06 |-1.01628108797
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(566, 566, 566, 566), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(566, 566, 566, 566) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |-2.14126378604e-05 |-1.03788638372
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(810, 810, 810, 810), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(810, 810, 810, 810) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |-5.30810239605e-05 |-0.996483800367
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(790, 790, 790, 790), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(790, 790, 790, 790) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |-4.95055646921e-06 |-1.02945802983
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(794, 794, 794, 794), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(794, 794, 794, 794) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |-2.53940790764e-05 |-1.03930307434
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(754, 754, 754, 754), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(754, 754, 754, 754) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |-0.000172334699842 |-1.0678847608
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(42, 42, 42, 42), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(42, 42, 42, 42) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.950768620937 |0.824926416905
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(515, 515, 515, 515), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(515, 515, 515, 515) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |-2.98461038566e-05 |-1.04083781076
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(638, 638, 638, 638), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(638, 638, 638, 638) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |-1.7453520561e-05 |-1.03629713432
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(865, 865, 865, 865), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(865, 865, 865, 865) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |-1.40423720119e-06 |-1.01755204552
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(746, 746, 746, 746), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(746, 746, 746, 746) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |-0.000198628075706 |-0.973222756276
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(732, 732, 732, 732), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(732, 732, 732, 732) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |-4.5258775816e-07 |-1.01930814638
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(38, 38, 38, 38), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(38, 38, 38, 38) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.951603636118 |0.833817156928
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(280, 280, 280, 280), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(280, 280, 280, 280) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.987881594589 |0.754353527741
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(701, 701, 701, 701), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(701, 701, 701, 701) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |-0.000120316111153 |-1.06021886968
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(783, 783, 783, 783), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(783, 783, 783, 783) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |-8.05471547927e-05 |-0.99068696599
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(153, 153, 153, 153), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(153, 153, 153, 153) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.96865935681 |0.782476324766
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(261, 261, 261, 261), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(261, 261, 261, 261) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.985078103022 |0.762148254741
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(337, 337, 337, 337), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(337, 337, 337, 337) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.993995318218 |0.81944713206
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(154, 154, 154, 154), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(154, 154, 154, 154) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.972265897251 |0.81229632738
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(751, 751, 751, 751), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(751, 751, 751, 751) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |-5.5950024358e-06 |-1.02994261253
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(957, 957, 957, 957), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(957, 957, 957, 957) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |-3.03017831635e-05 |-1.04093187187
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(671, 671, 671, 671), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(671, 671, 671, 671) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |-8.72010308406e-09 |-1.02241798844
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(747, 747, 747, 747), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(747, 747, 747, 747) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |-2.94408032842e-06 |-1.02768428795
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(737, 737, 737, 737), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(737, 737, 737, 737) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |-8.76801577672e-05 |-1.054535275
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(936, 936, 936, 936), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(936, 936, 936, 936) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |-5.54989002566e-05 |-0.995921853105
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(874, 874, 874, 874), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(874, 874, 874, 874) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |-0.000154735896641 |-0.978851495205
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(693, 693, 693, 693), learning_rate='adaptive',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(693, 693, 693, 693) |logistic |adaptive |0.9 |0.999 |1e-08 |0.001 |0.0001 |-3.09232677069e-05 |-1.00240929908
