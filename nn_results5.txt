MLPRegressor(activation='logistic', alpha=7.35986668737e-05,        batch_size='auto', beta_1=0.88368922667, beta_2=0.959557225142,        early_stopping=False, epsilon=4.25098343836e-08,        hidden_layer_sizes=(808,), learning_rate='constant',        learning_rate_init=0.000845905594061, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=24, shuffle=True,        solver='adam', tol=1e-10, validation_fraction=0.1, verbose=True,        warm_start=False)
[0, 12, 24, 36, 48, 60, 72, 84, 96] |(808,) |logistic |constant |0.88368922667 |0.959557225142 |4.25098343836e-08 |0.000845905594061 |7.35986668737e-05 |0.999803137186 |0.737150128384
MLPRegressor(activation='logistic', alpha=9.4920379783e-05, batch_size='auto',        beta_1=0.905712761346, beta_2=0.983659638757, early_stopping=False,        epsilon=3.42739124286e-08, hidden_layer_sizes=(435, 752),        learning_rate='adaptive', learning_rate_init=0.00107163446348,        max_iter=10000, momentum=0.9, nesterovs_momentum=True, power_t=0.5,        random_state=87, shuffle=True, solver='adam', tol=1e-10,        validation_fraction=0.1, verbose=True, warm_start=False)
[0, 4, 8, 12, 16, 20] |(435, 752) |logistic |adaptive |0.905712761346 |0.983659638757 |3.42739124286e-08 |0.00107163446348 |9.4920379783e-05 |0.994897381742 |0.750128878655
MLPRegressor(activation='relu', alpha=0.000103021440492, batch_size='auto',        beta_1=0.864746561934, beta_2=0.977768752763, early_stopping=False,        epsilon=5.24348545312e-08, hidden_layer_sizes=(749, 65),        learning_rate='constant', learning_rate_init=0.00107374155128,        max_iter=10000, momentum=0.9, nesterovs_momentum=True, power_t=0.5,        random_state=77, shuffle=True, solver='adam', tol=1e-10,        validation_fraction=0.1, verbose=True, warm_start=False)
[0, 8, 16, 24, 32, 40, 48, 56, 64, 72] |(749, 65) |relu |constant |0.864746561934 |0.977768752763 |5.24348545312e-08 |0.00107374155128 |0.000103021440492 |0.994996510453 |0.749724616505
