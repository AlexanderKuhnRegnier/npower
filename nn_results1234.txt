MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(123, 123), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(123, 123) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.984726986561 |0.794366886483
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(764,), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(764,) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.996091317878 |0.741958662393
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(265, 265, 265), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(265, 265, 265) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.979037417187 |0.826435230745
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(723, 723, 723), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(723, 723, 723) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.997886333335 |0.807726671363
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(444, 444), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(444, 444) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.996919076843 |0.802833690248
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(889, 889, 889), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(889, 889, 889) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.995845439264 |0.821148230522
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(777, 777), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(777, 777) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.996025359385 |0.807239141346
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(432, 432, 432), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(432, 432, 432) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.987684255502 |0.751015419649
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(969, 969, 969), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(969, 969, 969) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |-1.5812480991e-05 |-1.00575074155
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(357,), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(357,) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.985823399541 |0.759562452222
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(864,), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(864,) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.997575998079 |0.721728606443
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(572, 572, 572), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(572, 572, 572) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.997084204705 |0.813118162685
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(440, 440), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(440, 440) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.996715887679 |0.804915323897
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(877, 877, 877), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(877, 877, 877) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.996360146831 |0.827645552885
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(339, 339), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(339, 339) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.993192261852 |0.797420563128
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(70, 70, 70), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(70, 70, 70) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.961880816103 |0.810716627002
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(250, 250), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(250, 250) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.991591790088 |0.783779027117
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(90,), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(90,) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.958297498723 |0.790264235493
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(135,), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(135,) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.967348127606 |0.784248432394
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(348, 348), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(348, 348) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.988130867159 |0.85425952415
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(358,), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(358,) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.984846401542 |0.76664664266
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(82, 82), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(82, 82) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.97117200874 |0.809694317631
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(427,), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(427,) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.987547059686 |0.766424458598
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(617, 617, 617), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(617, 617, 617) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.994761233612 |0.803328205057
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(564, 564), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(564, 564) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.995476440905 |0.780330257678
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(907, 907), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(907, 907) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.998044450318 |0.778274391537
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(71, 71, 71), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(71, 71, 71) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.96569907533 |0.800435900398
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(805,), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(805,) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.99708210916 |0.728141772143
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(162, 162), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(162, 162) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.985052876869 |0.796925267563
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(180,), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(180,) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.972811953197 |0.790328288609
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(127, 127), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(127, 127) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.980514725251 |0.799023406407
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(123, 123, 123), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(123, 123, 123) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.96452396657 |0.843607429128
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(31, 31, 31), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(31, 31, 31) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.952362877946 |0.814137981507
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(362,), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(362,) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.984166281983 |0.756282801425
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(723,), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(723,) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.996101000057 |0.745865737839
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(613,), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(613,) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.995252537979 |0.723700220636
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(247, 247, 247), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(247, 247, 247) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.985102123198 |0.783472983509
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(146, 146, 146), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(146, 146, 146) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.97638318474 |0.823288322995
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(972,), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(972,) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.998278773794 |0.74183138208
MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto',        beta_1=0.9, beta_2=0.999, early_stopping=False, epsilon=1e-08,        hidden_layer_sizes=(426, 426), learning_rate='constant',        learning_rate_init=0.001, max_iter=10000, momentum=0.9,        nesterovs_momentum=True, power_t=0.5, random_state=None,        shuffle=True, solver='adam', tol=1e-10, validation_fraction=0.1,        verbose=True, warm_start=False)
[0, 4, 24, 48, 100] |(426, 426) |logistic |constant |0.9 |0.999 |1e-08 |0.001 |0.0001 |0.995695268781 |0.817738724281
